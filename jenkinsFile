pipeline {
    agent any
    
    stages {
        stage ("Git Checkout"){
            steps{
            git branch: 'atef-branch', 
            url: 'https://github.com/atefmiladi/TP-Achat.git'
            }
        
        }
        
        stage('Maven Clean') {
            steps {
                echo "Cleaning Project"
                sh 'mvn clean'
            }
        }
        
        stage('Maven Build') {
            steps {
                echo "Building Project"
                sh 'mvn clean install -DskipTests=true'
            }
        }
        
        stage('Unit Test') {
            steps {
                echo "Testing Project"
                sh 'mvn compile validate test'
            }
        }
        
        stage('Sonarqube Test') {
            steps {
                  echo "Sonarqube Testing "
                  
                withCredentials([string(credentialsId: 'SonarId', variable: 'Sonar')]) {
                      
                      sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=${Sonar}'
                } 
              
                
            }
        }
        
        stage('Create Package') {
            steps {
                echo "Creating Package"
                sh 'mvn package -DskipTests=true'
            }
        }
        
         stage("Publish to Nexus") {
             steps {
        sh 'mvn deploy'
      }
    
    }
        
    
        stage("Build our Image") {
          steps {
          
              sh 'docker build -t msoloz/projetachat:$BUILD_NUMBER .'
              
             }
       }
       
       stage("Push to DockerHub") { 
            steps { 
                script {
                    
                    withCredentials([string(credentialsId: 'DockerId', variable: 'Docker')]) {
                        sh 'docker login -u msoloz -p ${Docker}'
                        sh 'docker image push msoloz/projetachat:$BUILD_NUMBER'
                }
            } 
            }
            
        }
        
        stage("Docker-Compose") {
          steps {
              sh 'docker-compose up -d'
             }   
       } 

       stage("Slack Notification"){  
            steps{
                slackSend baseUrl: 'https://hooks.slack.com/services/', channel: 'everything', message: 'pipeline execution finished ', tokenCredentialId: 'SlackId', username: 'jenkins-bot'
            }
        }
        
     }
     post{
        success{
            
              slackSend baseUrl: 'https://hooks.slack.com/services/', channel: 'everything', message: 'Validation - Build - Success', tokenCredentialId: 'SlackId', username: 'jenkins-bot'
          
        }
        failure{
            
              slackSend baseUrl: 'https://hooks.slack.com/services/', channel: 'everything', message: 'Validation - Build - Failed', tokenCredentialId: 'SlackId', username: 'jenkins-bot'
           
        }
    }
}